{
    "version": "https://jsonfeed.org/version/1",
    "title": "好暖好温暖的博客",
    "subtitle": "一个电子信息系的大学生",
    "icon": "http://haoruanwn.github.io/assets/favicon.ico",
    "description": "记录学习与生活的点滴",
    "home_page_url": "http://haoruanwn.github.io",
    "items": [
        {
            "id": "http://haoruanwn.github.io/2025/07/27/%E6%96%87%E7%AB%A0%E6%B5%8B%E8%AF%95/",
            "url": "http://haoruanwn.github.io/2025/07/27/%E6%96%87%E7%AB%A0%E6%B5%8B%E8%AF%95/",
            "title": "Git 常用命令总结",
            "date_published": "2025-07-27T09:16:35.000Z",
            "content_html": "<h1 id=\"git-常用命令笔记\"><a class=\"anchor\" href=\"#git-常用命令笔记\">#</a> Git 常用命令笔记</h1>\n<p>本笔记旨在整理 Git 的基础配置、本地与远程仓库管理、分支操作及一些实用技巧。</p>\n<hr />\n<h2 id=\"一-基础配置\"><a class=\"anchor\" href=\"#一-基础配置\">#</a> 一、基础配置</h2>\n<h3 id=\"1-查看与设置用户信息\"><a class=\"anchor\" href=\"#1-查看与设置用户信息\">#</a> 1. 查看与设置用户信息</h3>\n<p>在首次使用 Git 前，需要配置全局的用户名和邮箱。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">功能说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>git config --list</code></td>\n<td style=\"text-align:left\">查看当前的 Git 配置信息。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>git config --global user.name &quot;Your Name&quot;</code></td>\n<td style=\"text-align:left\">设置全局用户名。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>git config --global user.email &quot;your.email@example.com&quot;</code></td>\n<td style=\"text-align:left\">设置全局用户邮箱。</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"shiki shiki-themes vitesse-light vitesse-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"line\"><span style=\"color:#A0ADA0;--shiki-dark:#758575DD\"># 查看所有配置</span></span>\n<span class=\"line\"><span style=\"color:#59873A;--shiki-dark:#80A665\">git</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> config</span><span style=\"color:#A65E2B;--shiki-dark:#C99076\"> --list</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0;--shiki-dark:#758575DD\"># 设置全局用户名和邮箱</span></span>\n<span class=\"line\"><span style=\"color:#59873A;--shiki-dark:#80A665\">git</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> config</span><span style=\"color:#A65E2B;--shiki-dark:#C99076\"> --global</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> user.name</span><span style=\"color:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\">Your Name</span><span style=\"color:#B5695977;--shiki-dark:#C98A7D77\">\"</span></span>\n<span class=\"line\"><span style=\"color:#59873A;--shiki-dark:#80A665\">git</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> config</span><span style=\"color:#A65E2B;--shiki-dark:#C99076\"> --global</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> user.email</span><span style=\"color:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\">your.email@example.com</span><span style=\"color:#B5695977;--shiki-dark:#C98A7D77\">\"</span></span></code></pre>\n<h3 id=\"2-配置-ssh-密钥\"><a class=\"anchor\" href=\"#2-配置-ssh-密钥\">#</a> 2. 配置 SSH 密钥</h3>\n<p>为了免密与 GitHub 等远程仓库进行通信，推荐使用 SSH 协议。</p>\n<ol>\n<li>生成 SSH 密钥对。</li>\n<li>将公钥（通常是 <code>~/.ssh/id_rsa.pub</code>）的内容添加到 GitHub 账户的 SSH keys 设置中。</li>\n</ol>\n<p>配置完成后，可通过以下命令验证连接是否成功，出现欢迎信息即表示配置正确。</p>\n<pre class=\"shiki shiki-themes vitesse-light vitesse-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"line\"><span style=\"color:#59873A;--shiki-dark:#80A665\">ssh</span><span style=\"color:#A65E2B;--shiki-dark:#C99076\"> -T</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> git@github.com</span></span></code></pre>\n<hr />\n<h2 id=\"二-本地仓库管理\"><a class=\"anchor\" href=\"#二-本地仓库管理\">#</a> 二、本地仓库管理</h2>\n<h3 id=\"1-初始化仓库-git-init\"><a class=\"anchor\" href=\"#1-初始化仓库-git-init\">#</a> 1. 初始化仓库 (<code>git init</code>)</h3>\n<p>在项目根目录中执行此命令，将会创建一个 <code>.git</code> 文件夹，用于存储版本库的所有信息。</p>\n<pre class=\"shiki shiki-themes vitesse-light vitesse-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"line\"><span style=\"color:#59873A;--shiki-dark:#80A665\">git</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> init</span></span></code></pre>\n<p><strong>设置默认分支名</strong>:<br />\n新版 Git 推荐使用 <code>main</code> 作为默认主分支名，可以通过以下命令进行全局配置，避免每次 <code>git init</code> 时都出现提示。</p>\n<pre class=\"shiki shiki-themes vitesse-light vitesse-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"line\"><span style=\"color:#59873A;--shiki-dark:#80A665\">git</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> config</span><span style=\"color:#A65E2B;--shiki-dark:#C99076\"> --global</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> init.defaultBranch</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> main</span></span></code></pre>\n<p><strong>删除本地仓库</strong>:<br />\n直接删除项目根目录下的 <code>.git</code> 文件夹即可。</p>\n<pre class=\"shiki shiki-themes vitesse-light vitesse-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"line\"><span style=\"color:#A0ADA0;--shiki-dark:#758575DD\"># 在 Linux / macOS / Git Bash 中</span></span>\n<span class=\"line\"><span style=\"color:#59873A;--shiki-dark:#80A665\">rm</span><span style=\"color:#A65E2B;--shiki-dark:#C99076\"> -rf</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> .git</span></span></code></pre>\n<h3 id=\"2-提交代码-git-add-git-commit\"><a class=\"anchor\" href=\"#2-提交代码-git-add-git-commit\">#</a> 2. 提交代码 (<code>git add</code> &amp; <code>git commit</code>)</h3>\n<p>代码提交分为两步：首先使用 <code>git add</code> 将文件更改添加到暂存区，然后使用 <code>git commit</code> 将暂存区的内内容永久保存到本地仓库。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">功能说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>git add &lt;file&gt;</code></td>\n<td style=\"text-align:left\">将指定文件的更改添加到暂存区。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>git add .</code></td>\n<td style=\"text-align:left\">将当前目录下所有文件的更改添加到暂存区。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>git commit -m &quot;commit message&quot;</code></td>\n<td style=\"text-align:left\">将暂存区内容提交到仓库，并附上提交信息。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>git commit -am &quot;commit message&quot;</code></td>\n<td style=\"text-align:left\">将所有已跟踪文件的更改直接暂存并提交（跳过<code>git add</code>）。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-查看提交历史-git-log\"><a class=\"anchor\" href=\"#3-查看提交历史-git-log\">#</a> 3. 查看提交历史 (<code>git log</code>)</h3>\n<p><code>git log</code> 命令用于查看从近到远的提交历史。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">功能说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>git log</code></td>\n<td style=\"text-align:left\">显示详细的提交历史（Commit ID, 作者, 日期, 提交信息）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>git log --stat</code></td>\n<td style=\"text-align:left\">在 <code>git log</code> 的基础上，显示每次提交所修改的文件列表。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>git log --oneline</code></td>\n<td style=\"text-align:left\">以简洁的单行格式显示提交历史。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>git show &lt;commit_id&gt;</code></td>\n<td style=\"text-align:left\">显示某次特定提交的详细变更内容（代码差异）。</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"shiki shiki-themes vitesse-light vitesse-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"line\"><span style=\"color:#A0ADA0;--shiki-dark:#758575DD\"># 查看简略历史</span></span>\n<span class=\"line\"><span style=\"color:#59873A;--shiki-dark:#80A665\">git</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> log</span><span style=\"color:#A65E2B;--shiki-dark:#C99076\"> --oneline</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0;--shiki-dark:#758575DD\"># 查看某次提交的具体修改</span></span>\n<span class=\"line\"><span style=\"color:#59873A;--shiki-dark:#80A665\">git</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> show</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> 9b568e99</span></span></code></pre>\n<h3 id=\"4-版本回退-git-reset\"><a class=\"anchor\" href=\"#4-版本回退-git-reset\">#</a> 4. 版本回退 (<code>git reset</code>)</h3>\n<p><code>git reset</code> 可以将当前分支的 <code>HEAD</code> 指针移动到指定的提交记录，常用于撤销提交。</p>\n<blockquote>\n<p><strong>警告</strong>: <code>--hard</code> 参数会丢弃工作区和暂存区中自指定提交以来的所有更改，操作具有破坏性，请谨慎使用。</p>\n</blockquote>\n<pre class=\"shiki shiki-themes vitesse-light vitesse-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"line\"><span style=\"color:#A0ADA0;--shiki-dark:#758575DD\"># 回退到指定的 commit，并丢弃之后的所有修改</span></span>\n<span class=\"line\"><span style=\"color:#59873A;--shiki-dark:#80A665\">git</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> reset</span><span style=\"color:#A65E2B;--shiki-dark:#C99076\"> --hard</span><span style=\"color:#AB5959;--shiki-dark:#CB7676\"> </span><span style=\"color:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\">commit_i</span><span style=\"color:#393A34;--shiki-dark:#DBD7CAEE\">d</span><span style=\"color:#AB5959;--shiki-dark:#CB7676\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0;--shiki-dark:#758575DD\"># 示例：回退到 9b568e99 这个提交</span></span>\n<span class=\"line\"><span style=\"color:#59873A;--shiki-dark:#80A665\">git</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> reset</span><span style=\"color:#A65E2B;--shiki-dark:#C99076\"> --hard</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> 9b568e99</span></span></code></pre>\n<hr />\n<h2 id=\"三-分支管理\"><a class=\"anchor\" href=\"#三-分支管理\">#</a> 三、分支管理</h2>\n<h3 id=\"1-查看与状态检查\"><a class=\"anchor\" href=\"#1-查看与状态检查\">#</a> 1. 查看与状态检查</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">功能说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>git branch</code></td>\n<td style=\"text-align:left\">列出所有本地分支，并用 <code>*</code> 标记当前所在分支。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>git status</code></td>\n<td style=\"text-align:left\">显示当前分支的状态，包括已修改、已暂存和未跟踪的文件。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2-创建与切换分支\"><a class=\"anchor\" href=\"#2-创建与切换分支\">#</a> 2. 创建与切换分支</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">功能说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>git branch &lt;branch_name&gt;</code></td>\n<td style=\"text-align:left\">创建一个新分支，但仍停留在当前分支。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>git checkout &lt;branch_name&gt;</code></td>\n<td style=\"text-align:left\">切换到已存在的分支。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>git checkout -b &lt;branch_name&gt;</code></td>\n<td style=\"text-align:left\">创建一个新分支，并立即切换到该分支。</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"shiki shiki-themes vitesse-light vitesse-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"line\"><span style=\"color:#A0ADA0;--shiki-dark:#758575DD\"># 创建一个名为 \"develop\" 的分支并切换过去</span></span>\n<span class=\"line\"><span style=\"color:#59873A;--shiki-dark:#80A665\">git</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> checkout</span><span style=\"color:#A65E2B;--shiki-dark:#C99076\"> -b</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> develop</span></span></code></pre>\n<h3 id=\"3-合并分支-git-merge\"><a class=\"anchor\" href=\"#3-合并分支-git-merge\">#</a> 3. 合并分支 (<code>git merge</code>)</h3>\n<p>将其他分支的更改合并到当前所在的分支。</p>\n<p><strong>流程示例：</strong> 将 <code>develop</code> 分支合并到 <code>main</code> 分支。</p>\n<ol>\n<li>首先，切换到接收更改的目标分支 <code>main</code>。<pre class=\"shiki shiki-themes vitesse-light vitesse-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"line\"><span style=\"color:#59873A;--shiki-dark:#80A665\">git</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> checkout</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> main</span></span></code></pre>\n</li>\n<li>然后，执行 <code>merge</code> 命令。<pre class=\"shiki shiki-themes vitesse-light vitesse-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"line\"><span style=\"color:#59873A;--shiki-dark:#80A665\">git</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> merge</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> develop</span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"4-删除分支-git-branch-d\"><a class=\"anchor\" href=\"#4-删除分支-git-branch-d\">#</a> 4. 删除分支 (<code>git branch -d</code>)</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">功能说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>git branch -d &lt;branch_name&gt;</code></td>\n<td style=\"text-align:left\">删除已合并的分支。如果分支包含未合并的更改，会提示失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>git branch -D &lt;branch_name&gt;</code></td>\n<td style=\"text-align:left\">强制删除一个分支，无论其是否已合并。</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"shiki shiki-themes vitesse-light vitesse-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"line\"><span style=\"color:#A0ADA0;--shiki-dark:#758575DD\"># 删除已合并的 develop 分支</span></span>\n<span class=\"line\"><span style=\"color:#59873A;--shiki-dark:#80A665\">git</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> branch</span><span style=\"color:#A65E2B;--shiki-dark:#C99076\"> -d</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> develop</span></span></code></pre>\n<hr />\n<h2 id=\"四-远程仓库协作\"><a class=\"anchor\" href=\"#四-远程仓库协作\">#</a> 四、远程仓库协作</h2>\n<h3 id=\"1-关联远程仓库-git-remote\"><a class=\"anchor\" href=\"#1-关联远程仓库-git-remote\">#</a> 1. 关联远程仓库 (<code>git remote</code>)</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">功能说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>git remote -v</code></td>\n<td style=\"text-align:left\">查看当前配置的所有远程仓库。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>git remote add &lt;name&gt; &lt;url&gt;</code></td>\n<td style=\"text-align:left\">添加一个新的远程仓库，通常命名为 <code>origin</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>git remote set-url &lt;name&gt; &lt;new_url&gt;</code></td>\n<td style=\"text-align:left\">更新一个已存在的远程仓库地址。</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"shiki shiki-themes vitesse-light vitesse-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"line\"><span style=\"color:#A0ADA0;--shiki-dark:#758575DD\"># 关联一个新的远程仓库，命名为 origin</span></span>\n<span class=\"line\"><span style=\"color:#59873A;--shiki-dark:#80A665\">git</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> remote</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> add</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> origin</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> git@github.com:user/repo.git</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0;--shiki-dark:#758575DD\"># 如果需要修改地址</span></span>\n<span class=\"line\"><span style=\"color:#59873A;--shiki-dark:#80A665\">git</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> remote</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> set-url</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> origin</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> git@github.com:user/new-repo.git</span></span></code></pre>\n<h3 id=\"2-推送至远程仓库-git-push\"><a class=\"anchor\" href=\"#2-推送至远程仓库-git-push\">#</a> 2. 推送至远程仓库 (<code>git push</code>)</h3>\n<p>将本地分支的提交推送到远程仓库。</p>\n<pre class=\"shiki shiki-themes vitesse-light vitesse-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"line\"><span style=\"color:#A0ADA0;--shiki-dark:#758575DD\"># 首次推送 master 分支，并设置上游跟踪关系</span></span>\n<span class=\"line\"><span style=\"color:#59873A;--shiki-dark:#80A665\">git</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> push</span><span style=\"color:#A65E2B;--shiki-dark:#C99076\"> -u</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> origin</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> master</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0;--shiki-dark:#758575DD\"># 后续推送</span></span>\n<span class=\"line\"><span style=\"color:#59873A;--shiki-dark:#80A665\">git</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> push</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0;--shiki-dark:#758575DD\"># 推送其他分支，如 test 分支</span></span>\n<span class=\"line\"><span style=\"color:#59873A;--shiki-dark:#80A665\">git</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> push</span><span style=\"color:#A65E2B;--shiki-dark:#C99076\"> -u</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> origin</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> test</span></span></code></pre>\n<blockquote>\n<p><strong>认证</strong>: 使用 <code>https</code> 协议推送时，通常需要输入个人访问令牌（Personal Access Token）；使用 <code>ssh</code> 协议则通过 SSH 密钥对自动认证。</p>\n</blockquote>\n<h3 id=\"3-克隆远程仓库-git-clone\"><a class=\"anchor\" href=\"#3-克隆远程仓库-git-clone\">#</a> 3. 克隆远程仓库 (<code>git clone</code>)</h3>\n<p>从远程仓库下载一个完整的项目副本到本地。</p>\n<pre class=\"shiki shiki-themes vitesse-light vitesse-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"line\"><span style=\"color:#A0ADA0;--shiki-dark:#758575DD\"># 克隆默认主分支</span></span>\n<span class=\"line\"><span style=\"color:#59873A;--shiki-dark:#80A665\">git</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> clone</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> git@github.com:user/repo.git</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0;--shiki-dark:#758575DD\"># 克隆时指定特定分支</span></span>\n<span class=\"line\"><span style=\"color:#59873A;--shiki-dark:#80A665\">git</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> clone</span><span style=\"color:#A65E2B;--shiki-dark:#C99076\"> -b</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> release/v8.2</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> https://github.com/lvgl/lvgl.git</span></span></code></pre>\n<hr />\n<h2 id=\"五-git-实用技巧\"><a class=\"anchor\" href=\"#五-git-实用技巧\">#</a> 五、Git 实用技巧</h2>\n<h3 id=\"1-忽略文件-gitignore\"><a class=\"anchor\" href=\"#1-忽略文件-gitignore\">#</a> 1. 忽略文件 (<code>.gitignore</code>)</h3>\n<p>通过在项目根目录创建 <code>.gitignore</code> 文件，可以指定不需要被 Git 跟踪的文件或目录（如编译产物、日志文件等）。</p>\n<p><strong>规则示例:</strong></p>\n<pre class=\"shiki shiki-themes vitesse-light vitesse-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee\" tabindex=\"0\"><code class=\"language-yml\"><span class=\"line\"><span style=\"color:#A0ADA0;--shiki-dark:#758575DD\"># 忽略所有 .a 文件</span></span>\n<span class=\"line\"><span style=\"color:#999999;--shiki-dark:#666666\">*</span><span style=\"color:#B07D48;--shiki-dark:#BD976A\">.a</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0;--shiki-dark:#758575DD\"># 但不忽略 lib.a</span></span>\n<span class=\"line\"><span style=\"color:#AB5959;--shiki-dark:#CB7676\">!lib.a</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0;--shiki-dark:#758575DD\"># 忽略 build/ 目录下的所有内容</span></span>\n<span class=\"line\"><span style=\"color:#B56959;--shiki-dark:#C98A7D\">build/</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0;--shiki-dark:#758575DD\"># 忽略 doc/notes.txt 文件</span></span>\n<span class=\"line\"><span style=\"color:#B56959;--shiki-dark:#C98A7D\">doc/notes.txt</span></span></code></pre>\n<p><strong>清理已跟踪文件</strong>: 如果某个文件在添加到 <code>.gitignore</code> 之前已经被提交，需要先从 Git 的索引中移除它，然后再次提交。</p>\n<pre class=\"shiki shiki-themes vitesse-light vitesse-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"line\"><span style=\"color:#A0ADA0;--shiki-dark:#758575DD\"># 从索引中移除 build 目录，但保留本地文件</span></span>\n<span class=\"line\"><span style=\"color:#59873A;--shiki-dark:#80A665\">git</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> rm</span><span style=\"color:#A65E2B;--shiki-dark:#C99076\"> -r</span><span style=\"color:#A65E2B;--shiki-dark:#C99076\"> --cached</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> build/</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0;--shiki-dark:#758575DD\"># 提交 .gitignore 和移除操作</span></span>\n<span class=\"line\"><span style=\"color:#59873A;--shiki-dark:#80A665\">git</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> commit</span><span style=\"color:#A65E2B;--shiki-dark:#C99076\"> -m</span><span style=\"color:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\">Update .gitignore and untrack build directory</span><span style=\"color:#B5695977;--shiki-dark:#C98A7D77\">\"</span></span></code></pre>\n<h3 id=\"2-重命名分支\"><a class=\"anchor\" href=\"#2-重命名分支\">#</a> 2. 重命名分支</h3>\n<h4 id=\"场景一分支未推送到远程\"><a class=\"anchor\" href=\"#场景一分支未推送到远程\">#</a> 场景一：分支未推送到远程</h4>\n<pre class=\"shiki shiki-themes vitesse-light vitesse-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"line\"><span style=\"color:#A0ADA0;--shiki-dark:#758575DD\"># 将 oldName 分支重命名为 newName</span></span>\n<span class=\"line\"><span style=\"color:#59873A;--shiki-dark:#80A665\">git</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> branch</span><span style=\"color:#A65E2B;--shiki-dark:#C99076\"> -m</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> oldName</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> newName</span></span></code></pre>\n<h4 id=\"场景二分支已推送到远程\"><a class=\"anchor\" href=\"#场景二分支已推送到远程\">#</a> 场景二：分支已推送到远程</h4>\n<p>需要分步操作：</p>\n<ol>\n<li><strong>重命名本地分支</strong><pre class=\"shiki shiki-themes vitesse-light vitesse-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"line\"><span style=\"color:#59873A;--shiki-dark:#80A665\">git</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> branch</span><span style=\"color:#A65E2B;--shiki-dark:#C99076\"> -m</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> oldName</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> newName</span></span></code></pre>\n</li>\n<li><strong>删除远程的旧分支</strong><pre class=\"shiki shiki-themes vitesse-light vitesse-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"line\"><span style=\"color:#59873A;--shiki-dark:#80A665\">git</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> push</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> origin</span><span style=\"color:#A65E2B;--shiki-dark:#C99076\"> --delete</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> oldName</span></span></code></pre>\n</li>\n<li><strong>推送新分支并建立跟踪关系</strong><pre class=\"shiki shiki-themes vitesse-light vitesse-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"line\"><span style=\"color:#59873A;--shiki-dark:#80A665\">git</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> push</span><span style=\"color:#A65E2B;--shiki-dark:#C99076\"> -u</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> origin</span><span style=\"color:#B56959;--shiki-dark:#C98A7D\"> newName</span></span></code></pre>\n</li>\n</ol>\n",
            "tags": []
        }
    ]
}